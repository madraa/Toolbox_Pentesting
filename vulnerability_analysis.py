import os
import requests
import nmap
import subprocess
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.units import inch

# Clé API pour Vulners
VULNERS_API_KEY = 'TOR62DP7BYXGE05SMFGWHGOU15JJS9O246T2XGJP2PGE5FWPC25TNVKV824HXET1'

# Menu principal pour l'analyse de vulnérabilités
def vulnerability_analysis_menu():
    print("\nAnalyse de Vulnérabilités\n" + "-"*30)
    print("a. Analyser les vulnérabilités pour une adresse IP spécifique")
    print("b. Analyse des configurations de sécurité")
    print("c. Scanner des applications web")
    print("d. Retour au menu principal")
    
    choice = input("Veuillez choisir une option [a-d]: ")
    
    if choice == 'a':
        ip_address = input("Entrez l'adresse IP pour analyser les vulnérabilités : ")
        analyze_ip_for_vulnerabilities(ip_address)
    elif choice == 'b':
        # À implémenter: Fonction pour analyser des configurations
        print("Fonctionnalité en développement.")
    elif choice == 'c':
        scan_web_application()
    elif choice == 'd':
        return  # Retour au menu principal
    else:
        print("Option non valide, veuillez réessayer.")

# Scanne les services sur une adresse IP donnée
def scan_services(ip_address):
    nm_scan = nmap.PortScanner()
    nm_scan.scan(ip_address, arguments='-sV')  # -sV pour détecter les versions des services
    services = []

    for host in nm_scan.all_hosts():
        for proto in nm_scan[host].all_protocols():
            lport = nm_scan[host][proto].keys()
            for port in lport:
                service = nm_scan[host][proto][port]['name']
                version = nm_scan[host][proto][port]['version']
                services.append((service, version, port))

    return services

# Recherche des vulnérabilités pour un service donné
def search_vulnerabilities(service_name, min_cvss=5.0):
    headers = {'Content-Type': 'application/json'}
    search_query = f"{service_name} vulnerability"
    data = {"apikey": VULNERS_API_KEY, "query": search_query}
    response = requests.post('https://vulners.com/api/v3/search/lucene/', json=data, headers=headers)
    
    vulnerabilities = []
    
    if response.status_code == 200:
        results = response.json().get('data', {}).get('search', [])
        if results:
            for vuln in results:
                vuln_id = vuln.get('_id', 'N/A')
                score = float(vuln.get('_source', {}).get('cvss', {}).get('score', 0))
                title = vuln.get('_source', {}).get('title', 'No title available')
                if score >= min_cvss:
                    vulnerabilities.append({
                        'id': vuln_id,
                        'score': score,
                        'title': title,
                        'href': vuln.get('_source', {}).get('href', 'N/A')
                    })
    return vulnerabilities

# Génère un rapport PDF des vulnérabilités trouvées
def generate_pdf_report(ip_address, services, vulnerabilities):
    # Chemins des fichiers PDF
    filename_current = f"vulnerability_report_{ip_address}.pdf"
    filename_reports = os.path.join("reports", f"vulnerability_report_{ip_address}.pdf")
    
    # Créer le dossier reports s'il n'existe pas
    os.makedirs("reports", exist_ok=True)
    
    # Générer le document PDF
    def build_pdf(filename):
        document = SimpleDocTemplate(filename, pagesize=letter)
        styles = getSampleStyleSheet()
        small_style = ParagraphStyle(name='Small', fontSize=8)
        Story = []

        Story.append(Paragraph(f"Rapport d'Analyse de Vulnérabilités pour {ip_address}", styles['Title']))
        Story.append(Spacer(1, 12))

        Story.append(Paragraph("Services détectés:", styles['Heading2']))
        data = [["Service", "Version", "Port"]]
        for service, version, port in services:
            data.append([Paragraph(service, small_style), Paragraph(version, small_style), port])
        table = Table(data, colWidths=[2 * inch, 2 * inch, 1 * inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        Story.append(table)
        Story.append(Spacer(1, 12))

        for service, version, port in services:
            service_name = f"{service} {version}"
            if service_name.strip():
                service_vulns = vulnerabilities.get(service_name, [])
                if service_vulns:
                    Story.append(Paragraph(f"Vulnérabilités pour {service_name}:", styles['Heading2']))
                    vuln_data = [["ID", "Score", "Titre", "Lien"]]
                    for vuln in service_vulns:
                        vuln_data.append([
                            Paragraph(vuln['id'], small_style),
                            Paragraph(str(vuln['score']), small_style),
                            Paragraph(vuln['title'], small_style),
                            Paragraph(vuln['href'], small_style)
                        ])
                    vuln_table = Table(vuln_data, colWidths=[1.2 * inch, 0.5 * inch, 2.5 * inch, 3.2 * inch])
                    vuln_table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                        ('GRID', (0, 0), (-1, -1), 1, colors.black),
                        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                    ]))
                    Story.append(vuln_table)
                    Story.append(Spacer(1, 12))

        document.build(Story)
        print(f"Le rapport PDF a été généré: {filename}")

    # Générer le PDF dans le dossier courant
    build_pdf(filename_current)
    
    # Générer le PDF dans le dossier reports
    build_pdf(filename_reports)

# Analyse les vulnérabilités pour une adresse IP spécifique
def analyze_ip_for_vulnerabilities(ip_address):
    print(f"\nAnalyse des vulnérabilités pour l'adresse IP : {ip_address}")
    services = scan_services(ip_address)
    vulnerabilities = {}

    if services:
        for service, version, port in services:
            service_name = f"{service} {version}"
            vulnerabilities[service_name] = search_vulnerabilities(service_name)

        # Demander à l'utilisateur s'il souhaite générer un rapport PDF
        generate_pdf = input("Voulez-vous générer un rapport PDF? (o/n): ").strip().lower()
        if generate_pdf == 'o':
            generate_pdf_report(ip_address, services, vulnerabilities)
        else:
            print("Rapport PDF non généré.")
    else:
        print("Aucun service détecté sur l'adresse IP spécifiée.")

# Scanner des applications web
def scan_web_application():
    print("\nScanner des applications web\n" + "-"*30)
    url = input("Entrez l'URL de l'application web à scanner: ")
    print("Options de scan:")
    print("1. Scan rapide")
    print("2. Scan complet")
    print("3. Détection de vulnérabilités SQL")
    choix_scan = input("Choisissez le type de scan [1-3]: ")

    sqlmap_path = "C:\\Users\\RayanTAMGLIT\\Desktop\\sqlmapproject-sqlmap-d85e09f\\sqlmap.py"

    command = ["python", sqlmap_path, "-u", url, "--batch"]

    if choix_scan == "1":
        command.extend(["--level", "1"])
    elif choix_scan == "2":
        command.extend(["--level", "5", "--risk", "3"])
    elif choix_scan == "3":
        command.extend(["--dbms", "mysql", "--dump"])
    else:
        print("Choix non valide. Exécution d'un scan rapide par défaut.")
        command.extend(["--level", "1"])

    try:
        subprocess.run(command, check=True)
        print("Scan terminé avec succès.")
    except subprocess.CalledProcessError as e:
        print(f"Erreur lors du scan de l'application web: {e}")

if __name__ == "__main__":
    vulnerability_analysis_menu()
