import requests
from bs4 import BeautifulSoup
from requests.exceptions import RequestException

def simple_login_test():
    print("\nTest de connexion simple.")
    url = input("Entrez l'URL du formulaire de connexion (ex. http://example.com/login) : ")
    username = input("Entrez le nom d'utilisateur (ex. user) : ")
    password = input("Entrez le mot de passe (ex. pass123) : ")

    session = requests.Session()

    try:
        # Obtenez la page de connexion
        response = session.get(url)
        response.raise_for_status()
    except RequestException as e:
        print(f"Erreur lors de la requête GET : {e}")
        return

    soup = BeautifulSoup(response.text, 'html.parser')

    # Trouver le formulaire de connexion
    login_form = None
    for form in soup.find_all('form'):
        if 'login' in form.get('action', '').lower() or 'auth' in form.get('action', '').lower():
            login_form = form
            break
    if login_form is None:
        login_form = soup.find('form')

    if login_form is None:
        print("Impossible de trouver le formulaire de connexion.")
        return

    # Préparation des données du formulaire
    payload = {}
    for input_tag in login_form.find_all('input'):
        name = input_tag.get('name')
        if name:
            if 'user' in name.lower():
                payload[name] = username
            elif 'pass' in name.lower():
                payload[name] = password
            else:
                payload[name] = input_tag.get('value', '')

    # URL d'action du formulaire
    action_url = login_form.get('action')
    if not action_url.startswith('http'):
        action_url = url + action_url

    try:
        # Soumission du formulaire de connexion
        login_response = session.post(action_url, data=payload, allow_redirects=True)
        login_response.raise_for_status()
    except RequestException as e:
        print(f"Erreur lors de la requête POST : {e}")
        return

    # Vérifiez les redirections et le contenu pour déterminer la réussite
    final_url = login_response.url
    error_messages = ["incorrect username", "incorrect password", "invalid credentials", "wrong username", "wrong password"]

    if any(msg in login_response.text.lower() for msg in error_messages):
        print("Échec de la connexion. Vérifiez les identifiants ou l'URL fournie.")
    elif final_url != url:
        print("Connexion réussie! Vous avez été redirigé.")
    else:
        print("Connexion non confirmée, vérifiez les identifiants ou la configuration du site.")

def session_validity_test():
    print("\nTest de la validité de la session en cours...")
    session_id = input("Entrez l'ID de session à tester (ex. 123456789abcdef) : ")
    url = input("Entrez l'URL du site où tester la session (ex. http://example.com/profile) : ")
    
    cookies = {'session_id': session_id}
    try:
        response = requests.get(url, cookies=cookies)
        response.raise_for_status()
        if response.status_code == 200:
            print("La session est toujours active.")
        else:
            print("La session n'est pas active ou le site a retourné une erreur.")
    except RequestException as e:
        print(f"Erreur lors de la requête : {e}")

def authentication_robustness_test():
    print("\nTest de robustesse des mécanismes d'authentification...")
    username = input("Entrez un nom d'utilisateur pour tester l'injection SQL (ex. admin) : ")
    password = "' OR '1'='1"
    url = input("Entrez l'URL du formulaire de login à tester (ex. http://example.com/login) : ")
    payload = {'username': username, 'password': password}

    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()
    except RequestException as e:
        print(f"Erreur lors de la requête POST : {e}")
        return

    # Exemple de recherche de message d'erreur SQL spécifique
    if "sql syntax" in response.text.lower() or "mysql_fetch" in response.text.lower():
        print("Vulnérabilité à l'injection SQL détectée!")
    else:
        print("Aucune vulnérabilité à l'injection SQL détectée avec les entrées fournies.")

def authentication_menu():
    while True:
        print("\nMenu de Tests d'Authentification")
        print("1. Test de connexion simple")
        print("2. Vérification de la validité des sessions")
        print("3. Tester la robustesse des mécanismes d'authentification")
        print("4. Retour au menu principal")

        choice = input("Choisissez une option [1-4]: ")

        if choice == '1':
            simple_login_test()
        elif choice == '2':
            session_validity_test()
        elif choice == '3':
            authentication_robustness_test()
        elif choice == '4':
            break
        else:
            print("Option non valide, veuillez réessayer.")

if __name__ == "__main__":
    authentication_menu()
