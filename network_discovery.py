import socket
import nmap
from IPy import IP
import netifaces as ni
from scapy.all import ARP, Ether, srp
from concurrent.futures import ThreadPoolExecutor

# Initialise le scanner Nmap
scanner = nmap.PortScanner()

def check_ip(ip):
    """ Vérifie et convertit le nom de domaine en adresse IP, si nécessaire. """
    try:
        IP(ip)
        return ip
    except ValueError:
        return socket.gethostbyname(ip)

def scan_port(ipaddress, port):
    """ Tente de se connecter à un port spécifique sur l'adresse IP donnée. """
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)
        result = sock.connect_ex((ipaddress, port))
        sock.close()
        if result == 0:
            print(f"[+] Le port {port} est ouvert")
    except:
        pass

def scan_ports(target):
    """ Scanne les ports de 1 à 1024 de l'adresse cible. """
    converted_ip = check_ip(target)
    print(f'\n[-_0] Début du scan de la cible: {target}')
    
    # Utilisation de ThreadPoolExecutor pour le multithreading
    with ThreadPoolExecutor(max_workers=100) as executor:
        ports = range(1, 1025)
        executor.map(lambda port: scan_port(converted_ip, port), ports)

def scan_services(target):
    """ Scanne les services en cours sur les ports ouverts. """
    print(f"\nScan des services en cours sur {target}...")
    scanner.scan(target, '1-1024', '-sV')

    # En-têtes du tableau
    print("\n{:<15} {:<7} {:<15} {:<10} {:<30}".format("Adresse IP", "Port", "Service", "État", "Version"))
    print("-" * 80)

    for proto in scanner[target].all_protocols():
        lport = scanner[target][proto].keys()
        for port in sorted(lport):
            service = scanner[target][proto][port]['name']
            state = scanner[target][proto][port]['state']
            version = scanner[target][proto][port].get('version', 'N/A')
            extrainfo = scanner[target][proto][port].get('extrainfo', '')
            product = scanner[target][proto][port].get('product', '')
            full_version = f"{product} {version} {extrainfo}".strip()
            print("{:<15} {:<7} {:<15} {:<10} {:<30}".format(target, port, service, state, full_version))

def detect_os(target):
    """ Détecte le système d'exploitation de la cible. """
    print(f"\nDétection du système d'exploitation pour {target}...")
    scanner.scan(target, arguments='-O')
    if 'osclass' in scanner[target]:
        for osclass in scanner[target]['osclass']:
            print(f"Détails du système : {osclass['osfamily']} {osclass['osgen']} {osclass['type']}")
    else:
        print("Échec de la détection du système d'exploitation.")

def get_local_subnet():
    """ Récupère le sous-réseau local de la passerelle par défaut. """
    try:
        gws = ni.gateways()
        gateway_default = gws['default'][ni.AF_INET][1]
        addr_info = ni.ifaddresses(gateway_default).get(ni.AF_INET, [{}])[0]
        addr = addr_info.get('addr')
        netmask = addr_info.get('netmask')

        if not addr or not netmask:
            print("Impossible de récupérer les informations réseau nécessaires.")
            return None

        subnet = f"{addr}/{sum(bin(int(x)).count('1') for x in netmask.split('.'))}"
        print(f"Sous-réseau détecté : {subnet}")
        return subnet
    except Exception as e:
        print(f"Erreur lors de la récupération des informations réseau : {e}")
        return None

def scan_local_network():
    """ Scanne le réseau local pour détecter les appareils actifs. """
    print("\nScan du réseau local pour détecter les appareils actifs...")
    subnet = get_local_subnet()
    if not subnet:
        print("Scan annulé : sous-réseau non disponible.")
        return

    arp_request = ARP(pdst=subnet)
    broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    answered_list = srp(arp_request_broadcast, timeout=2, verbose=False)[0]

    clients = []
    for sent, received in answered_list:
        clients.append({'ip': received.psrc, 'mac': received.hwsrc})

    print("{:<15} {:<17}".format("Adresse IP", "Adresse MAC"))
    print("-" * 32)
    for client in clients:
        print("{:<15} {:<17}".format(client['ip'], client['mac']))

def network_discovery_menu():
    """ Menu principal pour la découverte du réseau. """
    while True:
        print("\nMenu Découverte de Réseau\n" + "-"*20)
        print("a. Scanner les ports ouverts")
        print("b. Identifier les services en cours d'exécution")
        print("c. Détecter les systèmes d'exploitation")
        print("d. Scanner le réseau local")
        print("e. Revenir au menu principal")

        choice = input("Choisissez une option [a-e]: ")

        if choice == 'a':
            target = input("Entrez l'adresse IP ou le nom de domaine à scanner: ")
            scan_ports(target)
        elif choice == 'b':
            target = input("Entrez l'adresse IP ou le nom de domaine pour identifier les services: ")
            scan_services(target)
        elif choice == 'c':
            target = input("Entrez l'adresse IP ou le nom de domaine pour détecter le système d'exploitation: ")
            detect_os(target)
        elif choice == 'd':
            scan_local_network()
        elif choice == 'e':
            break
        else:
            print("Option non valide, veuillez réessayer.")

if __name__ == "__main__":
    network_discovery_menu()
