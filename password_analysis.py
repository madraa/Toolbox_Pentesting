import hashlib
import requests

# Fonction pour vérifier si un mot de passe a été compromis via l'API de Have I Been Pwned
def check_pwned(password):
    sha1password = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    first5_char, tail = sha1password[:5], sha1password[5:]
    url = f'https://api.pwnedpasswords.com/range/{first5_char}'
    response = requests.get(url)
    hashes = (line.split(':') for line in response.text.splitlines())
    for h, count in hashes:
        if h == tail:
            return True, count
    return False, 0

# Fonction pour évaluer la force du mot de passe
def password_strength(password):
    score = 0
    if len(password) >= 8:
        score += 1
    if any(x.isupper() for x in password):
        score += 1
    if any(x.islower() for x in password):
        score += 1
    if any(x.isdigit() for x in password):
        score += 1
    if any(x in "!@#$%^&*()-_=+[]{};:,.<>/?\\|`~" for x in password):
        score += 1
    return score

# Fonction pour interagir avec l'utilisateur et analyser le mot de passe saisi
def interactive_password_check():
    while True:
        password = input("Entrez un mot de passe pour l'analyser ou tapez 'back' pour revenir au menu précédent : ")
        if password.lower() == 'back':
            break
        pwned, count = check_pwned(password)
        strength = password_strength(password)
        strength_desc = 'Strong' if strength >= 4 else 'Weak'
        
        print(f"\nAnalyse du mot de passe : {password}")
        print(f"Compromis : {'Oui' if pwned else 'Non'}")
        print(f"Nombre de fois compromis : {count if pwned else 'N/A'}")
        print(f"Score de force : {strength} (5 = Très fort, 0 = Très faible)")
        print(f"Description de la force : {strength_desc}\n")

def analyze_from_file():
    file_path = input("Entrez le chemin du fichier contenant les mots de passe : ")
    try:
        with open(file_path, 'r') as file:
            passwords = file.readlines()
            results = [interactive_password_check(password.strip()) for password in passwords]
    except FileNotFoundError:
        print("Fichier non trouvé. Veuillez vérifier le chemin et réessayer.")
    except Exception as e:
        print(f"Erreur lors de la lecture du fichier : {str(e)}")

def password_menu():
    while True:
        print("\nMenu d'Analyse de Sécurité des Mots de Passe")
        print("1. Analyser un mot de passe")
        print("2. Analyser des mots de passe depuis un fichier")
        print("3. Quitter")
        choice = input("Choisissez une option [1-3]: ")

        if choice == '1':
            interactive_password_check()
        elif choice == '2':
            analyze_from_file()
        elif choice == '3':
            break
        else:
            print("Option non valide, veuillez réessayer.")

if __name__ == "__main__":
    password_menu()
